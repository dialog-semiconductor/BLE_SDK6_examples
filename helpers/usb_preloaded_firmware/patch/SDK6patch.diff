diff --git a/sdk/app_modules/src/app_common/app.c b/sdk/app_modules/src/app_common/app.c
index 7ba7156..fd3e7c0 100644
--- a/sdk/app_modules/src/app_common/app.c
+++ b/sdk/app_modules/src/app_common/app.c
@@ -51,6 +51,12 @@
 #include "user_custs_config.h"
 #endif
 
+#include "user_periph_setup.h"
+#include "user_config.h"
+#include "uart_utils.h"
+#include "timer0_2.h"
+#include "timer0.h"
+
 /*
  * DEFINES
  ****************************************************************************************
@@ -58,6 +64,17 @@
 
 #define APP_EASY_GAP_MAX_CONNECTION     APP_EASY_MAX_ACTIVE_CONNECTION
 
+
+//volatile uint8_t timeout_expiration;
+static tim0_2_clk_div_config_t clk_div_config =
+{
+    .clk_div  = TIM0_2_CLK_DIV_8
+};
+void timer0_general_test(uint32_t times_seconds);
+// Timer0 settings
+#define NO_PWM            0x0                       // PWM not used
+#define RELOAD_100MS      20000                     // reload value for 100ms
+#define TEST_LENGTH_SEC   10                        // length of the test in seconds
 /*
  * GLOBAL VARIABLE DEFINITIONS
  ****************************************************************************************
@@ -156,7 +173,7 @@ static timer_hnd adv_timer_id
 static void (*adv_timeout_callback)(void)                                          __SECTION_ZERO("retention_mem_area0"); // @RETENTION MEMORY
 
 #if (USER_CFG_ADDRESS_MODE == APP_CFG_ADDR_STATIC)
-static struct bd_addr app_random_addr                                              __SECTION_ZERO("retention_mem_area0"); //@ RETENTION MEMORY
+struct bd_addr app_random_addr                                              __SECTION_ZERO("retention_mem_area0"); //@ RETENTION MEMORY
 #endif
 
 /*
@@ -186,7 +203,17 @@ static bool app_task_in_user_app(enum KE_API_ID task_id)
      return false;
 }
 
+/**
+ ****************************************************************************************
+ * @brief Initialize the database for all the included profiles.
+ * @return true if succeeded, else false
+ ****************************************************************************************
+ */
+#if !defined (__DA14531__) || defined (__EXCLUDE_ROM_APP_TASK__)
+static bool app_db_init_next(void)
+#else
 bool app_db_init_next(void)
+#endif
 {
     static uint8_t i __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY;
     static uint8_t k __SECTION_ZERO("retention_mem_area0"); //@RETENTION MEMORY;
@@ -421,6 +448,7 @@ static struct gapm_start_advertise_cmd* app_easy_gap_undirected_advertise_start_
         cmd->intv_min = user_adv_conf.intv_min;
         cmd->intv_max = user_adv_conf.intv_max;
         cmd->channel_map = user_adv_conf.channel_map;
+        cmd->info.host.mode = user_adv_conf.mode;
         cmd->info.host.adv_filt_policy = user_adv_conf.adv_filt_policy;
         if (user_adv_conf.adv_filt_policy == ADV_ALLOW_SCAN_ANY_CON_WLST)
         {
@@ -434,7 +462,7 @@ static struct gapm_start_advertise_cmd* app_easy_gap_undirected_advertise_start_
         memcpy(&(cmd->info.host.adv_data[0]), USER_ADVERTISE_DATA, USER_ADVERTISE_DATA_LEN);
         adv_cmd->info.host.scan_rsp_data_len = USER_ADVERTISE_SCAN_RESPONSE_DATA_LEN;
         memcpy(&(cmd->info.host.scan_rsp_data[0]), USER_ADVERTISE_SCAN_RESPONSE_DATA, USER_ADVERTISE_SCAN_RESPONSE_DATA_LEN);
-#if !defined (__DA14531_01__)
+
 #if (USER_CFG_ADDRESS_MODE == APP_CFG_CNTL_PRIV_RPA_RAND)
         // Local Address has been added to RAL. Use this entry to advertise with RPA
         memcpy(cmd->info.host.peer_info.addr.addr, &(gapm_env.addr), BD_ADDR_LEN * sizeof(uint8_t));
@@ -460,7 +488,7 @@ static struct gapm_start_advertise_cmd* app_easy_gap_undirected_advertise_start_
             }
         }
 #endif
-#endif // __DA14531_01__
+
         // Place the Device Name in the Advertising Data or in the Scan Response Data
         if (USER_DEVICE_NAME_LEN > 0)
         {
@@ -576,12 +604,10 @@ static struct gapc_param_update_cmd* app_easy_gap_param_update_msg_create(uint8_
     return param_update_cmd[conidx];
 }
 
-#if !defined (__DA14531_01__)
 /**
  ****************************************************************************************
  * @brief Create GAPM_START_CONNECTION_CMD message (connection message).
  * @return gapm_start_connection_cmd Pointer to GAPM_START_CONNECTION_CMD message
- * @note Not applicable to DA14531-01
  ****************************************************************************************
  */
 static struct gapm_start_connection_cmd* app_easy_gap_start_connection_to_msg_create(void)
@@ -658,7 +684,6 @@ static struct gapm_start_connection_cmd* app_easy_gap_start_connection_to_msg_cr
     }
     return start_connection_cmd;
 }
-#endif // __DA14531_01__
 
 /**
  ****************************************************************************************
@@ -694,6 +719,30 @@ static struct gapm_set_dev_config_cmd* app_easy_gap_dev_config_create_msg(void)
         {
             CALLBACK_ARGS_1(user_app_callbacks.app_on_generate_static_random_addr, &app_random_addr)
             memcpy(cmd->addr.addr, app_random_addr.addr, BD_ADDR_LEN * sizeof(uint8_t));
+						printf_string(UART1, "#########################################################################################");
+					  printf_string(UART1, "\n\r");
+					  printf_string(UART1, " This is your Unique Static Random Address For your Device embed in the DA14531 USB KIT : \n\r");
+					  printf_string(UART1, "#########################################################################################");
+					   
+					  printf_string(UART1, "\n\r");
+					  printf_string(UART1, "\n\r");
+					          
+						printf_byte(UART1, app_random_addr.addr[5]);
+						printf_string(UART1, ":");
+						printf_byte(UART1, app_random_addr.addr[4]);
+						printf_string(UART1, ":");
+						printf_byte(UART1, app_random_addr.addr[3]);
+						printf_string(UART1, ":");
+						printf_byte(UART1, app_random_addr.addr[2]);
+						printf_string(UART1, ":");
+						printf_byte(UART1, app_random_addr.addr[1]);
+						printf_string(UART1, ":");
+					  printf_byte(UART1, app_random_addr.addr[0]);
+
+						printf_string(UART1, "\n\r");
+						printf_string(UART1, "\n\r");
+						printf_string(UART1, "\n\r");
+					
         }
         else
         {
@@ -930,7 +979,6 @@ void app_timer_set(ke_msg_id_t const timer_id, ke_task_id_t const task_id, uint3
 }
 #endif
 
-#if !defined (__DA14531_01__)
 struct gapm_start_connection_cmd* app_easy_gap_start_connection_to_get_active(void)
 {
     return(app_easy_gap_start_connection_to_msg_create());
@@ -956,13 +1004,94 @@ void app_easy_gap_start_connection_to(void)
     app_connect_start_msg_send((void *) msg);
     start_connection_cmd = NULL;
 }
-#endif // __DA14531_01__
 
 struct gapm_set_dev_config_cmd* app_easy_gap_dev_config_get_active(void)
 {
      return app_easy_gap_dev_config_create_msg();
 }
 
+
+/**
+ ****************************************************************************************
+ * @brief Timer0 general user callback function
+ *
+ ****************************************************************************************
+ */
+static void timer0_general_user_callback_function(void)
+{
+	    static uint8_t n = 0;
+
+    // when pass  10 * 100ms
+    if ( 10 == n )
+    {
+        n = 0;
+//        timeout_expiration--;
+
+					printf_string(UART1, "#########################################################################################");
+					printf_string(UART1, "\n\r");
+					printf_string(UART1, " This is your Unique Static Random Address For your Device embed in the DA14531 USB KIT : \n\r");
+					printf_string(UART1, "#########################################################################################");
+					   
+					printf_string(UART1, "\n\r");
+					printf_string(UART1, "\n\r");
+					          
+				  printf_byte(UART1, app_random_addr.addr[5]);
+					printf_string(UART1, ":");
+					printf_byte(UART1, app_random_addr.addr[4]);
+					printf_string(UART1, ":");
+					printf_byte(UART1, app_random_addr.addr[3]);
+					printf_string(UART1, ":");
+					printf_byte(UART1, app_random_addr.addr[2]);
+					printf_string(UART1, ":");
+					printf_byte(UART1, app_random_addr.addr[1]);
+					printf_string(UART1, ":");
+					printf_byte(UART1, app_random_addr.addr[0]);
+
+					printf_string(UART1, "\n\r");
+					printf_string(UART1, "\n\r");
+					printf_string(UART1, "\n\r");
+     }
+		
+     n++;
+}
+
+
+void timer0_general_test(uint32_t times_seconds)
+{
+
+    // Stop timer for enter settings
+    timer0_stop();
+
+    // register callback function for SWTIM_IRQn irq
+    timer0_register_callback(timer0_general_user_callback_function);
+
+    // Enable the Timer0/Timer2 input clock
+    timer0_2_clk_enable();
+
+    // Set the Timer0/Timer2 input clock division factor to 8, so 16 MHz / 8 = 2 MHz input clock
+    timer0_2_clk_div_set(&clk_div_config);
+
+    // clear PWM settings register to not generate PWM
+    timer0_set_pwm_high_counter(NO_PWM);
+    timer0_set_pwm_low_counter(NO_PWM);
+
+    // Set timer with 2MHz source clock divided by 10 so Fclk = 2MHz/10 = 200kHz
+    timer0_init(TIM0_CLK_FAST, PWM_MODE_ONE, TIM0_CLK_DIV_BY_10);
+
+    // reload value for 100ms (T = 1/200kHz * RELOAD_100MS = 0,000005 * 20000 = 100ms)
+    timer0_set_pwm_on_counter(RELOAD_100MS);
+
+    // Enable SWTIM_IRQn irq
+    timer0_enable_irq();
+
+    // Start Timer0
+    timer0_start();
+
+    // Disable the Timer0/Timer2 input clock
+    timer0_2_clk_disable();
+}
+
+
 void app_easy_gap_dev_configure(void)
 {
     struct gapm_set_dev_config_cmd* cmd = app_easy_gap_dev_config_create_msg();
@@ -980,21 +1109,7 @@ void app_easy_gap_get_peer_features(uint8_t conidx)
     ke_msg_send(pkt);
 }
 
-#if defined (__DA14531_01__)
-void app_easy_gap_set_data_packet_length(uint8_t conidx, uint16_t tx_octets, uint16_t tx_time)
-{
-    struct gapc_set_le_pkt_size_cmd *cmd = KE_MSG_ALLOC(GAPC_SET_LE_PKT_SIZE_CMD,
-                                                        KE_BUILD_ID(TASK_GAPC, conidx),
-                                                        TASK_APP,
-                                                        gapc_set_le_pkt_size_cmd);
-
-    cmd->operation = GAPC_SET_LE_PKT_SIZE;
-    cmd->tx_octets = co_min(tx_octets, llm_le_env.supportedMaxTxOctets);
-    cmd->tx_time = co_min(tx_time, llm_le_env.supportedMaxTxTime);
-
-    ke_msg_send(cmd);
-}
-#elif !defined (__DA14531__) || defined (__EXCLUDE_ROM_APP_TASK__)
+#if !defined (__DA14531__) || defined (__EXCLUDE_ROM_APP_TASK__)
 void app_easy_gap_set_data_packet_length(uint8_t conidx, uint16_t tx_octets, uint16_t tx_time)
 {
     struct gapc_set_le_pkt_size_cmd *cmd = KE_MSG_ALLOC(GAPC_SET_LE_PKT_SIZE_CMD,
@@ -1008,9 +1123,7 @@ void app_easy_gap_set_data_packet_length(uint8_t conidx, uint16_t tx_octets, uin
 
     ke_msg_send(cmd);
 }
-#endif
 
-#if !defined (__DA14531__) || defined (__EXCLUDE_ROM_APP_TASK__)
 app_prf_srv_perm_t get_user_prf_srv_perm(enum KE_API_ID task_id)
 {
     uint8_t i;
diff --git a/sdk/platform/arch/main/arch_main.c b/sdk/platform/arch/main/arch_main.c
index 3ab9367..a883ca1 100644
--- a/sdk/platform/arch/main/arch_main.c
+++ b/sdk/platform/arch/main/arch_main.c
@@ -61,6 +61,10 @@
 #include "ea.h"
 
 #include "arch_ram.h"
+#include "systick.h"
+#include "uart_utils.h"
+#include "timer0_2.h"
+#include "timer0.h"
 
 #if defined (__DA14531__)
 #include "otp_cs.h"
@@ -84,35 +88,10 @@
  * DEFINES
  ****************************************************************************************
  */
-
-#if !defined (__DA14531__)
-#if defined (CFG_RETAIN_RAM_1_BLOCK)
-#define RAM_1_BLOCK                 (0x01)
-#else
-#define RAM_1_BLOCK                 (0)
-#endif
-
-#if defined (CFG_RETAIN_RAM_2_BLOCK)
-#define RAM_2_BLOCK                 (0x02)
-#else
-#define RAM_2_BLOCK                 (0)
-#endif
-
-#if defined (CFG_RETAIN_RAM_3_BLOCK)
-#define RAM_3_BLOCK                 (0x04)
-#else
-#define RAM_3_BLOCK                 (0)
-#endif
-
-#define RAM_4_BLOCK                 (0x08)
-#endif
-
-#if defined (__DA14531__)
-#define ALL_RAM_BLOCKS              (0)
-#else
-#define ALL_RAM_BLOCKS              (RAM_1_BLOCK | RAM_2_BLOCK | RAM_3_BLOCK | RAM_4_BLOCK)
-#endif
-
+#define SYSTICK_PERIOD_US   200000     // period for systick timer in us, so 1000000ticks = 1second
+#define SYSTICK_EXCEPTION   1           // generate systick exceptions
+int i = 0;
+#define TEST_LENGTH_SEC   10                        // length of the test in seconds
 /*
  * STRUCTURE DEFINITIONS
  ****************************************************************************************
@@ -133,12 +112,11 @@ extern last_ble_evt arch_rwble_last_event;
 extern otp_cs_booter_val_t booter_val;
 #endif
 
-#if defined (CFG_AUTO_DETECT_NON_RET_HEAP) && (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
-static uint32_t ret_mode_for_non_ret_heap       __SECTION_ZERO("retention_mem_area0");
-#endif
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
-static bool reinit_non_ret_heap            __SECTION_ZERO("retention_mem_area0");
-#endif
+static uint32_t code_size                      __SECTION_ZERO("retention_mem_area0");
+static uint8_t ret_mode_for_non_ret_heap       __SECTION_ZERO("retention_mem_area0");
+static uint8_t ret_mode                        __SECTION_ZERO("retention_mem_area0");
+static uint8_t ret_mode_for_ret_data           __SECTION_ZERO("retention_mem_area0");
+static uint8_t reinit_non_ret_heap             __SECTION_ZERO("retention_mem_area0");
 
 /*
  * LOCAL FUNCTION DECLARATIONS
@@ -164,15 +142,18 @@ __STATIC_INLINE void init_retention_mode(void);
 #if !defined (__DA14531__)
 __STATIC_INLINE void set_ldo_ret_trim(uint8_t retained_ram_blocks);
 #endif
-#if defined (CFG_AUTO_DETECT_NON_RET_HEAP) && (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
-__STATIC_INLINE uint32_t get_retention_mode_non_ret_heap(void);
+#if !defined (CFG_CUSTOM_SCATTER_FILE)
+__STATIC_INLINE uint8_t get_retention_mode(void);
+__STATIC_INLINE uint8_t get_retention_mode_data(void);
 #endif
-
+static inline uint8_t get_retention_mode_non_ret_heap(void);
+extern void timer0_general_test(uint32_t times_seconds);
 /*
  * MAIN FUNCTION
  ****************************************************************************************
  */
-
+volatile uint8_t timeout_expiration = 0xA;
+void systick_test(void);
 /**
  ****************************************************************************************
  * @brief BLE main function.
@@ -191,6 +172,12 @@ int main(void)
 
     //global initialise
     system_init();
+	
+			
+		    // Setup UART1 pins and configuration
+    uart_periph_init(UART1);
+	
+		  systick_test();
 
     /*
      ************************************************************************************
@@ -259,6 +246,31 @@ int main(void)
     }
 }
 
+static void systick_isr(void)
+{	 
+    if (i == 0)
+    {
+        GPIO_SetActive(GPIO_LED_PORT, GPIO_LED_PIN);
+        i = 1;
+		  timer0_general_test(TEST_LENGTH_SEC);
+    }
+    else
+    {
+        GPIO_SetInactive(GPIO_LED_PORT, GPIO_LED_PIN);
+        i = 0;
+		    timer0_general_test(TEST_LENGTH_SEC);
+    }
+}
+
+
+void systick_test(void)
+{
+    systick_register_callback(systick_isr);
+    // Systick will be initialized to use a reference clock frequency of 1 MHz
+    systick_start(SYSTICK_PERIOD_US, SYSTICK_EXCEPTION);
+}
+
+
 /**
  ****************************************************************************************
  * @brief Power down the BLE Radio and whatever is allowed according to the sleep mode and
@@ -376,13 +388,11 @@ __STATIC_INLINE void arch_resume_from_sleep(void)
     SetBits16(GP_DATA_REG, 0x60, 1);
 #endif
 
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
     // Check if non retained heap should be re-initialized
     if (reinit_non_ret_heap)
     {
         ke_mem_init(KE_MEM_NON_RETENTION, (uint8_t*)(rom_cfg_table[rwip_heap_non_ret_pos]), rom_cfg_table[rwip_heap_non_ret_size]);
     }
-#endif
 
 #if defined (__DA14531__)
     // Re-initialize peripherals and pads
@@ -521,46 +531,157 @@ __STATIC_INLINE void ble_turn_radio_off(void)
  */
 __STATIC_INLINE void init_retention_mode(void)
 {
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
-#if defined (CFG_AUTO_DETECT_NON_RET_HEAP)
+#if defined (CFG_CUSTOM_SCATTER_FILE)
+    // User selects which RAM blocks to retain (code and retention data or only retention data)
+    ret_mode = ret_mode_for_ret_data = ALL_RAM_BLOCKS;
+
+#else
+    // RAM retention mode for retention data only
+    ret_mode_for_ret_data = get_retention_mode_data();
+
+    // RAM retention mode for code and data
+#if defined (__DA14531__)
+    ret_mode = get_retention_mode() & ret_mode_for_ret_data;
+#else
+    ret_mode = get_retention_mode() | ret_mode_for_ret_data;
+#endif
+
+#endif
     // RAM retention mode for the non retainable heap data only
     ret_mode_for_non_ret_heap = get_retention_mode_non_ret_heap();
+}
+
+/**
+ ****************************************************************************************
+ * @brief Define which RAM blocks will be retained based on the base address of the
+ *        retention data which touch the aforementioned RAM blocks.
+ *        The last RAM block is always retained.
+ * @return the retention mode (the RAM blocks to be retained)
+ * @note This function is strongly related to the default SDK scatter file structure.
+ ****************************************************************************************
+ */
+#if !defined (CFG_CUSTOM_SCATTER_FILE)
+__STATIC_INLINE uint8_t get_retention_mode_data(void)
+{
+    uint32_t ret_mem_base_addr = RET_MEM_BASE;
+
+#if defined (__DA14531__)
+    // Check the base address of the retention data
+    if (ret_mem_base_addr >= RAM_3_BASE_ADDR)
+    {
+        // Retain RAM_3 block
+        return (RAM_3_BLOCK);
+    }
+    else if (ret_mem_base_addr >= RAM_2_BASE_ADDR)
+    {
+        // Retain RAM_2 and RAM_3 block
+        return (RAM_2_BLOCK & RAM_3_BLOCK);
+    }
+#else
+    // Check the base address of the retention data
+    if (ret_mem_base_addr >= RAM_4_BASE_ADDR)
+    {
+        // Retain RAM_4 block
+        return (RAM_4_BLOCK);
+    }
+    else if (ret_mem_base_addr >= RAM_3_BASE_ADDR)
+    {
+        // Retain RAM_3 and RAM_4 block
+        return (RAM_3_BLOCK | RAM_4_BLOCK);
+    }
+    else if (ret_mem_base_addr >= RAM_2_BASE_ADDR)
+    {
+        // Retain RAM_2, RAM_3 and RAM_4 block
+        return (RAM_2_BLOCK | RAM_3_BLOCK | RAM_4_BLOCK);
+    }
 #endif
+    // Retain all RAM blocks
+    return ALL_RAM_BLOCKS;
+}
+
+/**
+ ****************************************************************************************
+ * @brief Define which RAM blocks will be retained based on the code and the retention
+ *        data size.
+ *        The last RAM block is always retained.
+ * @return the retention mode (the RAM blocks to be retained)
+ * @note This function is strongly related to the default SDK scatter file.
+ ****************************************************************************************
+ */
+__STATIC_INLINE uint8_t get_retention_mode(void)
+{
+    // The following equation calculates the code size and is strongly related to the
+    // default SDK scatter file structure. Count vector table and rom patches as well.
+    code_size = (CODE_AREA_BASE - RAM_1_BASE_ADDR) + CODE_AREA_LENGTH;
+
+#if defined (__DA14531__)
+    // Check the code size
+    if (code_size <= (RAM_2_BASE_ADDR - RAM_1_BASE_ADDR))
+    {
+        // Code fits in RAM_1 block
+        return (RAM_1_BLOCK);
+    }
+#else
+    // Check the code size
+    if (code_size <= (RAM_2_BASE_ADDR - RAM_1_BASE_ADDR))
+    {
+        // Code fits in RAM_1 block
+        return (RAM_1_BLOCK);
+    }
+    else if (code_size <= (RAM_3_BASE_ADDR - RAM_1_BASE_ADDR))
+    {
+        // Code fits in RAM_1 block and RAM_2 block
+        return (RAM_1_BLOCK | RAM_2_BLOCK);
+    }
 #endif
+    // Retain all RAM blocks
+    return ALL_RAM_BLOCKS;
 }
+#endif // CFG_CUSTOM_SCATTER_FILE
 
-#if defined (CFG_AUTO_DETECT_NON_RET_HEAP) && (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
 /**
  ****************************************************************************************
  * @brief Calculate the RAM blocks which will be retained depending on the non retained
  *        heap base address and size.
  * @return the retention mode (the RAM blocks to be retained)
- * @note Last RAM block is always retained since it holds the BLE state and ROM data
  ****************************************************************************************
  */
-__STATIC_INLINE uint32_t get_retention_mode_non_ret_heap()
+__STATIC_INLINE uint8_t get_retention_mode_non_ret_heap()
 {
     uint32_t non_ret_heap_base = NON_RET_HEAP_BASE;
     uint32_t non_ret_heap_length = NON_RET_HEAP_LENGTH;
 
 #if defined (__DA14531__)
-    if (non_ret_heap_base >= RAM_2_BASE_ADDR && non_ret_heap_base < RAM_3_BASE_ADDR)
+    if (non_ret_heap_base >= RAM_3_BASE_ADDR)
     {
-        return (0xF3);              // Retain RAM2
+        return (RAM_3_BLOCK);
     }
-
-    if (non_ret_heap_base < RAM_2_BASE_ADDR)
+    else if (non_ret_heap_base >= RAM_2_BASE_ADDR)
     {
-        if (non_ret_heap_base + non_ret_heap_length > RAM_2_BASE_ADDR)
+        if (non_ret_heap_base + non_ret_heap_length < RAM_3_BASE_ADDR)
         {
-            return (0xFC & 0xF3);   // Retain RAM1, RAM2
+            return (RAM_2_BLOCK);
         }
         else
         {
-            return 0xFC;            // Retain RAM1
+            return (RAM_2_BLOCK & RAM_3_BLOCK);
+        }
+    }
+    else
+    {
+        if (non_ret_heap_base + non_ret_heap_length < RAM_2_BASE_ADDR)
+        {
+            return (RAM_1_BLOCK);
+        }
+        else if (non_ret_heap_base + non_ret_heap_length < RAM_3_BASE_ADDR)
+        {
+            return (RAM_1_BLOCK & RAM_2_BLOCK);
+        }
+        else
+        {
+            return ALL_RAM_BLOCKS;
         }
     }
-    return 0x0F;
 #else
     if (non_ret_heap_base >= RAM_4_BASE_ADDR)
     {
@@ -613,7 +734,6 @@ __STATIC_INLINE uint32_t get_retention_mode_non_ret_heap()
     }
 #endif
 }
-#endif // CFG_AUTO_DETECT_NON_RET_HEAP
 
 #if !defined (__DA14531__)
 /**
@@ -652,19 +772,7 @@ __STATIC_INLINE void arch_turn_peripherals_off(sleep_mode_t current_sleep_mode)
 {
     if (current_sleep_mode == mode_ext_sleep || current_sleep_mode == mode_ext_sleep_otp_copy)
     {
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
-#if defined (__DA14531__)
-#if defined (CFG_RETAIN_RAM_1_BLOCK)
-        uint32_t retained_ram_blocks = 0x04;                // Always retain RAM1 and RAM3
-#elif defined (CFG_RETAIN_RAM_2_BLOCK)
-        uint32_t retained_ram_blocks = 0x01;                // Always retain RAM2 and RAM3
-#else
-        uint32_t retained_ram_blocks = 0x05;                // Always retain RAM3
-#endif
-#else
-        uint32_t retained_ram_blocks = ALL_RAM_BLOCKS;      // Initialize retention mode
-#endif
-#endif
+        uint8_t retained_ram_blocks = 0;
         SCB->SCR |= 1<<2; // enable deep sleep  mode bit in System Control Register (SCR[2]=SLEEPDEEP)
 
 #if defined (__DA14531__)
@@ -685,6 +793,7 @@ __STATIC_INLINE void arch_turn_peripherals_off(sleep_mode_t current_sleep_mode)
 
             // OTP copy and OTP copy emulation will be disabled
             SetBits16(SYS_CTRL_REG, OTP_COPY, 0);
+            retained_ram_blocks = ret_mode;
         }
         else
         {
@@ -699,57 +808,36 @@ __STATIC_INLINE void arch_turn_peripherals_off(sleep_mode_t current_sleep_mode)
             // enable OTP copy emulation
             SetBits16(SYS_CTRL_REG, OTP_COPY, 1);
             SetBits16(SYS_CTRL_REG, DEV_PHASE, 1);
+            retained_ram_blocks = ret_mode;
 #else
             // enable OTP copy
             SetBits16(SYS_CTRL_REG, DEV_PHASE, 0);
-#endif
-
-#if defined (CFG_CODE_SIZE_FOR_OTP_COPY_ON)
-            ASSERT_WARNING(CFG_CODE_SIZE_FOR_OTP_COPY_ON > 0);
-            ASSERT_WARNING(CFG_CODE_SIZE_FOR_OTP_COPY_ON <= MEMORY_OTP_SIZE);
-            uint32_t code_size = CFG_CODE_SIZE_FOR_OTP_COPY_ON;
-#else
-            // The following equation calculates the code size and is strongly related to the
-            // default SDK scatter file structure. The vector table and rom patches are included
-            // in the code area calculations as well.
-            uint32_t code_size = (CODE_AREA_BASE - RAM_1_BASE_ADDR) + CODE_AREA_LENGTH;
+            retained_ram_blocks = ret_mode_for_ret_data;
 #endif
             otp_prepare((code_size + 3) >> 2);       // convert function argument from bytes to 32-bit words
         }
 
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
         // manage the non-retained heap
-        // Note: non-retained heap is either empty or not. If it is not empty it must be retained.
+        // Note: non-retained heap is either empty or not. If it is non empty it must be retained.
         if (!ke_mem_is_empty(KE_MEM_NON_RETENTION))
         {
-            reinit_non_ret_heap = false;
-#if defined (CFG_AUTO_DETECT_NON_RET_HEAP)
+            reinit_non_ret_heap = 0;
 #if defined (__DA14531__)
             retained_ram_blocks &= ret_mode_for_non_ret_heap;
 #else
             retained_ram_blocks |= ret_mode_for_non_ret_heap;
-#endif
 #endif
         }
         else
         {
-            reinit_non_ret_heap = true;
+            reinit_non_ret_heap = 1;
         }
-#endif
 
-        // set the RAM retention mode during extended sleep
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
+        // dynamically select the retained RAM blocks
         arch_ram_set_retention_mode(retained_ram_blocks);
-#else
-        arch_ram_set_retention_mode(ALL_RAM_BLOCKS);                    // Retain all RAM blocks
-#endif
 
 #if !defined (__DA14531__)
-#if (DO_NOT_RETAIN_ALL_RAM_BLOCKS)
         set_ldo_ret_trim(retained_ram_blocks);
-#else
-        set_ldo_ret_trim(ALL_RAM_BLOCKS);
-#endif
 #endif
     }
 }
@@ -841,7 +929,7 @@ __STATIC_INLINE void app_asynch_sleep_proc(void)
 
 /**
  ****************************************************************************************
- * @brief Used to override the slected extended sleep mode , based on the current
+ * @brief Used to override the selected extended sleep mode , based on the current
  *        application state.
  *        BLE and Radio are still powered off.
  * @param[in] sleep_mode     Sleep Mode
